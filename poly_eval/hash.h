#include "lhe.h"

/*! \struct hash_k
 * a and b is used to generate private hash key and public hash key in different
 * ways.
 */
typedef struct
{
  bn_t *a;   // private
  bn_t *b;   // private
  g2_t **K;  // public
} hash_k;


/**
 * generate the hash key
 * @param[out] hk        the hash key generated by this function
 * @param[in] par        some parameter in flint lib
 */
int hash_keygen(hash_k *hk, lhe_par *par);

/**
 * hash the input
 * @param[out] hv        the hash result
 * @param[in] c          the input wanted to be hashed
 * @param[in] hk         the hashkey
 * @param[in] mode       the hash mode(0:using privatekey  1:using publickey)
 * @param[in] par        some parameter in flint lib
 */
int hash_H(g2_t hv, lhe_c * c, hash_k *hk, int mode, lhe_par *par);

/**
 * compute
 * @param[out] hv        one line of the function matrix with size 1*d
 * @param[in] HV         the input message
 * @param[in] L          the column of the L and the row of the C
 * @param[in] d          some parameter in flint lib
 * @param[in] par        some parameter in flint lib
 */
int hash_eval(g2_t hv, g2_t *HV, fq_t *L, int d, lhe_par *par);
